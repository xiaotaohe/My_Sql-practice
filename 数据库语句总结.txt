数据库练习：
A数据库的操作：
	1.创建数据库：
	create database 库名；（后面还可以跟设置：字符集和字符集校验）；
	create database db1 charset=utf8;
	create database db2 charset=utf8 collate utf8=utf8_general_ci;
	2.查看字符集和校验规则：
		查看系统默认字符集：
		show variables like 'charset_set_database';
		查看系统默认校验规则：
		show variables like 'collate_database';
	3.查看数据库支持的字符集
		show charset;
	4.查看数据库支持的字符集校验规则
		show collation;
		字符集的影响：
		1.不区分大小写的影响：
			create database test1 collate utf8_general_ci;
			创建一个数据库，校验规则为【utf8_general_ci】不区分大小写
			use test1;
			create table person(name varchar(32));
			insert into person value ('a');
			insert into person value ('A');
			insert into person value ('b');
			insert into person value ('B');
		不区分大小写查到的结果也就不区分大小写（排序也是区分大小写的）。
			create database test2 collate utf8_bin;
			创建一个数据库【utf8_bin】区分大小写。
			use test2;
		区分大小写的字符集校验规则查到的大小也就区分大小写（排序也一样）。
B数据库的操纵：
	1.查看数据库：
		show databases;
	2.显示数据库创建语句
		show create database 数据库名;
		show create table 表名;
	3.修改数据库（是指修改数据库的字符集、校验规则）：
		alter database 数据库名;
		eg:
			alter database test1 charset=gbk;
			alter database test1 charset=gbk collate  gbk_bin;
	4.数据库的删除：
		drop database [if exists]数据库名;
		eg:
			drop database if exists test1;
	5.数据库的备份和恢复：
		备份整个库：mysqldump -u root -p 密码 -B 数据库名>数据可备份的路径
		eg:
			mysqldump -u root -p -B test2 > /root/mytest2.sql;
			注意：如果没有-B选项时，需要重新建库，然后使用恢复语句。
		恢复：source /root/mytest2.sql;
		
		备份：某几个数据库时
		mysqldump -u root -p -B 数据库名1 数据库名2 > 路径名;
		：
		备份:某个库的某个表或某些表
		mysqldump -u root -p 库名 表名 > 路径名;
		eg:
			mysqldump -u root -p test1 student > ./mytest1.sql;
			此时就没有必要要-B选项。
		恢复：同上。
	6.查看链接情况：
		show processlist;
C数据库表的操作：
	1.创建表：
		creat table tabke_name(
		列名1 datatype;
		列名2 datatype;
		列名3 datatype;
		列名4 datatype;
		)character set 字符集 collate 校验规则 engine 存储引擎;
	eg:
		create table user(id int,
		name varchar(32) comment '用户名',
		passwd char(32) comment '密码',
		birthday date comment '生日')
		character set utf8 engine MyISAM;
	2.查看表结构：
		desc 表名;
		eg:
			desc user;
	3.修改表
		a.修改表名：如：修改表user名为user1
		alter table 旧表名 rename to 新表名;
		eg:
			alter table user rename to user1;
		
		A.修改表的字符集以及字符集校验规则：
			修改表的字符集：alter table 表名 convert to character set 字符集;
			eg:alter table char_eg convert to character set utf8;
				alter table 表名 charset=utf8;
			修改表的字符集校验规则：alter table 表名 convert to collate 字符集校验规则;
			eg:alter table char_eg convert to collate utf8_general_ci;
			修改表的字符集以及校验规则：alter table 表名 convert to character set 字符集 
										collate 字符集校验规则;
			eg:alter table char_eg convert to character set utf8 collate utf8_general_ci;
			
		b.添加一个字段 如：在表中添加一个新的字段，如用于保存图片的字段
		alter table 表名 add 字段名（列名）定义;
		eg:
			alter table user add assets varchar(100) comment '图片路径' after birthday;
			插入新字段对原来表的内容没有影响。
		
		c.修改某一字段 如：name(xingming)，将其长度改为128
		alter table 表名 modify 字段名 定义;
			eg:
				alter table user modify xingming varchar(128);
		
		d.删除某一字段 如：删除paaswd列
			警告：删除某一字段一定要小心，删除字段及其对应的列数据都没了
		alter table 表名 drop 字段名;
		eg:
			alter table user drop passwd;
		
		e.修改字段名：
		alter table 表名 change 列名 新名 定义;
		eg:
			alter table user change name xingming varchar(64);
	4.删除表：
		drop table 表名;
D数据类型：
	数据类型分类：
		数值类型：
			BIT(M)（位类型，M指定位数，默认值1，范围1-64）
			TINYINT[unsigned] 带符号的范围128~127，无符号的范围0~255，默认有符号
			BOOL 使用0/1表示真假
			SMALLINT、INT [unsiged] 、BIGINT、
			FLOAT[(m,d)] [unsigned]m指定显示长度，d指定小数点位，占用4个字节
			DOUBLE [(m,d)] [unsigned]占8个字节 、
			DECIMAL(M,D) [unsigned]定点数m表示指定长度，d指小数位数。
		文本、二进制类型：
			char(size) 固定长度字符串，最大255
			varchar(size) 可变长度字符串，最大长度65535
			BLOB 二进制数据
			TEXT 大文本，不支持全文索引，不支持默认值
		时间日期：DATE/DATETIME/TIMESTAMP 
				日期类型(yyyy-mm-dd) (yyyy-mm-dd hh:mm:ss) timestamp时间戳
		string类型：ENUM类型 ： 
						enum是一个字符串对象，其值显示枚举的一列值。
					SET类型：
						SET是一个字符串对象，可以有零个或者多个值，其值来自
						表创建时规定的允许的一列值。
	
	类型介绍：
		1.tinyint类型：
			数值越界测试：
			create table tt1(num tinyint);
			insert into tt1 values (1);
			insert into tt1 values (128);//出错
			//报错：ERROR 1264 (22003): Out of range value for column 'num' at row 1
			注意：
			1.在MySQL中，整型可以指定为有符号/无符号的，默认为有符号。
			2.可以通过UNSIGNED来说明该字段为无符号。
			
			如创建tt2：
			create table tt2(num tinyint unsiged);
			insert into tt2 values (128);//此时就不会出错了。
		2.bit类型：
			bit字段显示时，是按照ASCII码对应的值显示。
			如：
				create table tt3 (num int,a bit(8));
				insert into tt4 values(1,65);此时a字段有一个数据为A，65是A的ASCII码值。
			bit的应用场景：当我们有这样的值，只存存放0/1，这时用bit(1)就比较节省空间了。
		3.小数类型：
			1.如：float(4,2)表示的范围-99.99~99.99，
			MySQL在保存值时会进行四舍五入（在有符号情况下），无符号为0~99.99
		
			2.decimal(m,d)
			如decimal(5,2)表示的范围-999.99~999.99 无符号0~999.99
		4.字符串类型：
			1.char类型： char(L) 固定长度字符串，
				L是可以存储的长度，单位为字符，最大长度值可以为255(2^8)。
			eg:
				create table char_eg (id int, name char(2));
				insert into char_eg values (1,'ab');
				insert into char_eg values (2,'中国');
			char(L) 表示字符数，如：char(2) 表示可以存放两个字符，可以是汉子或者字母，
				不能超过两个，最多只能255个(2^8);
			create table char_eg2 (id int,name char(256));//报错：ERROR
			报错：ERROR信息：Column length too big for column 'name' (max = 255); 
			use BLOB or TEXT instead
			
			2.varchar(L):可变长度字符串，L表示字符长度，最大长度为65535个字节。
			eg:
				create table varchar_eg (id int,name varchar(6)) character set utf8;
				insert into varchar_eg values (1,'abc');
				insert into varchar_eg values (2,'hello');
			注意：a：varchar长度指定为0~65535之间的值，但是有1~3个字节用于记录数据大小，
			所以说有效字节数是65532。
				  b：当我们表的编码为utf8时，varchar(n)的参数n最大是65532/3=21844因为
				  utf中，一个字符占3个字节，如果编码是gbk，varchar(n)的参数最大为65532/2
				  = 32766因为gbk中，一个字符占2个字节。
			1-2：char 与 varchar的比较
				1.如果确定数据长度都一样，使用定长char 如：身份证 手机号
				2.如果数据长度有变化使用varchar。如：姓名、地址、但必须保证能放入最长的。
				3.定长的磁盘空间比较浪费，但效率高。
				4.变长的可以节省磁盘空间，但效率低。
		5.日期和时间类型：
			常用的日期有三个：
				1.datetime 时间日期格式 'yyyy-mm-dd HH:mm:ss'表示范围从 1000 到9999
				占用8个字节。
				2.date：日期'yyyy-mm-dd'，占用3个字节。
				3.timestamp：时间戳，从1970年开始的'yyyy-mm-dd HH:mm:ss'格式和datetime
				完全一致，占用4个字节。
			eg:
				create table datetime_eg (t1 date,t2 datetime,t3 timestamp);
				insert into datetime_eg (t1,t2) values('1997-1-23','2018-11-26 11:33:45');
				更新数据：
				update datetime_eg set t1 = '1998-1-23';
		6.enum 和 set：
			enum：枚举，其实就是‘单选项’类型，对应界面或单表的‘单选项’的数据值。
				总之是多选一、每个选项对应一个数字为1~65535个。
			set：集合，是多选类型，对应于界面或表单的“多选项”的数据值。数值范围
				1~64。总之是多选多。
			eg: 
			建表：
			create table enum_set( 
			username varchar(32),
			hobby set ('登山','游泳', '篮球','武术'),
			gender enum('男','女','保密'));
			插入数据：
			insert into enum_set values ('雷锋', '篮球,武术','男');
			insert into enum_set values ('刘诗诗', '篮球','女');
			insert into enum_set values ('刀郎', '篮球,游泳','保密');
			查找enum选项的人(多选一)：
			select * from enum_set where gender = 2;
			select * from enum_set where gender = '女';//等价于上一个。
			查找set选项的人(多选多)中有一项符合即可：
				使用函数：find_in_set:
				select * from 表名 where find_in_set(选项，set字段名);
				eg:select * from enum_set where find_in_set('登山',hobby);
			查找set选项的人(多选多)中必须和这一项吻合的人：
				select * from 表名 where hobby = 选项;
				eg：select * from enum_set where hobby = '篮球';
E表的约束：
	1.空属性null（默认）和not null（不为空）
		在实际开发时，尽可能保证字段不为空，因为数据为空无法参与运算。
	eg：创建一个班级表，包含班级名和班级所在的教室，如果班级没有名字，
	你不知道你在哪个班，如果教室名字可以为空就不知道在哪上课
		//创建班级表
		create table myclass(
		class_name varchar(20) not null,
		class_room varchar(10) not null);
		//插入没有班级名的数据时，失败
		insert into myclass (class_room) values('1-2');
		ERROR 1364 (HY000): Field 'class_name' doesn't have a default value
		//插入没有班级所在教室的数据时，失败
		insert into myclass (class_name) values('数学');
		ERROR 1364 (HY000): Field 'class_room' doesn't have a default value
		//正确插入
		insert into myclass (class_name,class_room) values('数学','2-1');
	2.默认值
		某一种数据会经常性出现某个具体的值，可以在一开始就指定好，在需要真实数据的时候，
		用户可以选择的使用默认值。
		eg:
		create table default_table(
		name varchar(20) not null,
		age tinyint unsigned default 0,
		sex char(2) default '男');
		
		注意：数据插入的时候不给该字段赋值，就使用默认值。
	3.列描述
		列描述：comment，我们的表有时候会有很多列，但我们不可能长时间记住所有列的含义，
		此时我们可以通过列描述记录它的含义，程序员或DBA通过查看表的描述信息进行了解。
		eg：
		create table cow_com(
		name varchar(20) not null comment '姓名',
		age tinyint unsigned default 0 comment '年龄',
		sex char(2) default '男' comment '性别')character set utf8;
	4.zerofill
		如字段属性为int(5)时，当我们插入的数据为1时，设置了zerofill时，前4为会自动填充0，
		但在MySQL中实际存储的还是1。
		可以验证一下：
		eg：
		create table zerofill_eg(
		name varchar(20),
		sal int(5) comment '薪水');
		查看表的结构：
		desc zerofill_eg;
		+-------+-------------+------+-----+---------+-------+
		| Field | Type        | Null | Key | Default | Extra |
		+-------+-------------+------+-----+---------+-------+
		| name  | varchar(20) | YES  |     | NULL    |       |
		| sal   | int(5)      | YES  |     | NULL    |       |
		+-------+-------------+------+-----+---------+-------+
		插入数据并查看：
		insert into zerofill_eg values('dab',1);
		select * from zerofill_eg;
		+------+------+
		| name | sal  |
		+------+------+
		| dab  |    1 |
		+------+------+
		设置为zerofill属性：
		alter table zerofill_eg change sal sal int(5) unsigned zerofill;
		此时查看：
		+------+-------+
		| name | sal   |
		+------+-------+
		| dab  | 00001 |
		+------+-------+
		验证sal  00001的存储仍然为1：通过函数hex验证：
		select sal , hex(sal) from zerofill_eg;
		+-------+----------+
		| sal   | hex(sal) |
		+-------+----------+
		| 00001 | 1        |
		+-------+----------+
		可以看出数据库内部存储的还是1,00001只是设置了zerofill属性后的一种格式化输出。
	5.主键(primary key)：
		主键：primary key用来唯一的约束该字段里面的数据，不能重复，不能为空，一张表
		最多只能有一个主键；主键所在的列通常是整数类型。
		1.创建表的时候直接在字段上指定主键
		eg:
		create table prim_eg(
		id int unsigned primary key comment '学号不能为空',
		name varchar(20) not null);
		此时可以通过desc prim_eg;看到id的key项为PRI表示主键。
		2.复合主键：
		如果有多个字段作为主键，可以使用复合主键：
		eg：
		create table prim_com(
		id int unsigned,
		course char(10) comment '课程代码',
		score tinyint unsigned default 60 comment '成绩',
		primary key(id,course)
		);
		此时查看表结构，可以看到id、course 的key项为PRI。
		3.可以追加主键：
			当一个表已经创建好了，可以再次追加主键。
			alter table 表名 add primary key (字段名);
		4.主键约束：主键对应的字段中不能重复，一旦重复，操作便失败。
		eg：
			insert into prim_eg values(1,'jk.ma');
			insert into prim_eg values(1,'jk.li');
			ERROR 1062 (23000): Duplicate entry '1' for key 'PRIMARY'
		5.删除主键
		alter table 表名 drop primary key;
		eg：
			alter table prim_eg drop primary key;
	6.自增长（auto_increment）：
		当对应的字段，不给值，会自动的被系统触发，系统会从当前字段中已经有的
		最大值+1操作，得到一个新的不同的值。通常和主键搭配使用，作为主键逻辑。
		自增长特点：
				1.任何一个字段要做自增长，前提是该字段本身是引索（key一栏）。
				2.自增长字段必须是整数。
				3。一个表最多只能有一个自增长。
		eg：
			create table auto_increment_eg(
			id int primary key auto_increment,
			name varchar(10) not null default '');
			
			
			insert into auto_increment_eg values(null,'aa');
			注意：当采用自增长时，如果第一条数据每个时，系统默认从1开始。
			insert into auto_increment_eg values(1,'bb');//此时在插入id=1的数据，出错
	7.唯一键：
		一张表中往往会有很多字段需要唯一性，数据不能重复，但是一张表只能有一个主键。
		唯一键就可以解决多个字段需要唯一性约束的问题。
		唯一键与主键的区别：
			唯一键和主键差不多，唯一键可以为空且可以多个为空；但主键不能为空。
			（空字段不能做唯一性比较）
		eg：
		create table unique_eg(
		id char(10) unique comment '学号，不能重复，但可以为空',
		name varchar(10))character set utf8;
			insert into unique_eg values ('1024','aa');
			insert into unique_eg values ('1023','bb');
			insert into unique_eg values ('1025',null);
	8.外键
		外键用于定义主表和从表之间的关系：外键约束主要定义在从表上，主表则必须是有主键约束
		或unique约束。当定义外键后，要求外键列数据必须在主表的主键列存在或为null。
		语法：foreign key (字段名) references 主表(列);
		eg:
		主表：
		create table main_key_eg(
		id int primary key,
		name varchar(30) not null comment '班级名');
		从表：
		create table foreign_eg(
		id int primary key,
		name varchar(30) not null comment '学生名',
		class_id int,
		foreign key (class_id) references main_key_eg(id));
		
		主表插入数据：insert into foreign_eg values (10,'c++'),(20,'java');
		从表插入数据：insert into foreign_eg values (100,'张三',10),(101,'李四',20);
			注意：此时插入：insert into foreign_eg values (102,'张四',30);时，因为主表没有30班
		所以插不进去。
		但可以插入学生，班级为空，此时还未分配班：
		insert into foreign_eg values (102,'张四',null);
		eg:
		有一个商店的数据，记录客户及购物情况，有以下三个表组成：
			商品goods(商品编号goods_ id，商品名goods_ name, 单价unitprice,
				商品类别category, 供应商provider)
			客户customer(客户号customer_ id,姓名name,住址address,邮箱email,
				性别sex，身份证card_id)
			购买purchase(购买订单号order_ id,客户号customer_ id,商品号goods_ id,购买数量nums)
		要求：
				每个表的主外键
				客户的姓名不能为空值
				邮箱不能重复
				客户的性别(男，女)
		实例：
			create table goods(
			goods_id int unsigned primary key auto_increment,
			goods_name varchar(100) not null default '',
			unitprice decimal(10,2) not null default 0.0,
			category smallint not null default 0,
			provider varchar(100) not null default '');
			
			create table customer(
			customer_id int unsigned primary key auto_increment,
			name varchar(100) not null default '',
			address varchar(100) not null default '',
			email varchar(60) not null unique,
			sex enum('男','女') not null default '男',
			card_id varchar(20) not null unique);
			
			create table purchase(
			order_id varchar(30) not null primary key,
			customer_id int unsigned,
			goods_id int unsigned,
			nums int not null default 0,
			foreign key(customer_id) references customer(customer_id),
			foreign key(goods_id) references goods(goods_id));
F表的增删改查
	1.增加：insert into 表名 values (value1,value2...);
	

		

			
			
			

	